# General Settings
#
# Commit Size
tdg.commit.size=2000
#
####### NODE DEFINITIONS ######
#
#  tdg.node.list contains a comma seperated list of create node definitions  [alias:label:amount]
# 
tdg.node.list=comp:Company:150
# Company
tdg.node.props.Company.name=companyName
tdg.node.props.Company.url=url
tdg.node.props.Company.bs=companyBS
tdg.node.props.Company.slogan=companySlogan
tdg.node.props.Company.text=txtText:40
tdg.node.props.Company.sentence=txtSentence
tdg.node.props.Company.sentences=txtSentences:3
tdg.node.props.Company.paragraph=txtParagraph:10
tdg.node.props.Company.paragraphs=txtParagraphs:3

######## Lookup nodes
# Use a cypher query to get a set of nodes to relate to.
# These lookup nodes can be used to create relations with
# any generated node and or to set propertie on them.
# note that the return set must contain nodes only
# For the cypher statements: you must use a \ to have a multiline property value
# 
tdg.lookup.nodes.list=matchCities
tdg.lookup.cypher.matchCities=match (cit:City) return cit
# we don't have to set properties on these lookup nodes

###### Relation Definitions ##### 
#tdg.rel.list contains a comma seperated list of relation identifiers 
tdg.rel.list=companyCity
#
# tdg.rel.def.<rel name>=<start node identifier>,relationtype,<end node identifier>,cardinality
# Cardinality:
#
# 1-n      : The "end node" may have max one relation from the start node 
# n-1      : The "start node" may have max one relation to the end node
# 1-1      : The "end node" may have one relation from the start node and the 
#            "start node" may have one relation to the end node
# 
# All relations may be created if possible.
# We have a lookup node here you must refer to lookupNode name.colname
tdg.rel.def.companyCity=comp,LOCATED_IN,matchCities.cit,n-1

